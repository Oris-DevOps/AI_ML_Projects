{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled0.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyMSeMleKF/USTIRfQiuT3zU",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Oris-DevOps/AI_ML_Projects/blob/main/code_test_colab_to_git\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DhjBYfNtQKhW"
      },
      "source": [
        "**Testing Google Lab**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ePg5ZzPyQUTb"
      },
      "source": [
        "import seaborn as sns\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "sns.set(color_codes=True)"
      ],
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QWxuZCkDQas1",
        "outputId": "89bfab5b-a6f5-4d6d-88d9-15f00896e26f"
      },
      "source": [
        "narr=np.random.randn(4,4)\n",
        "print(narr)"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[ 3.39096267 -0.47442841  0.81243968 -0.77599879]\n",
            " [-0.39601194 -0.2449884  -0.55604135 -0.70757105]\n",
            " [-0.60728049  1.287131    0.18185241  0.61621854]\n",
            " [-1.49168798 -0.93145333 -1.92299637 -0.14865065]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 173
        },
        "id": "uYGoqHJDR0CI",
        "outputId": "50c16693-64eb-4d39-9fc3-b38cbfcde800"
      },
      "source": [
        "df=pd.DataFrame(narr)\n",
        "df"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>3.390963</td>\n",
              "      <td>-0.474428</td>\n",
              "      <td>0.812440</td>\n",
              "      <td>-0.775999</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>-0.396012</td>\n",
              "      <td>-0.244988</td>\n",
              "      <td>-0.556041</td>\n",
              "      <td>-0.707571</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-0.607280</td>\n",
              "      <td>1.287131</td>\n",
              "      <td>0.181852</td>\n",
              "      <td>0.616219</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-1.491688</td>\n",
              "      <td>-0.931453</td>\n",
              "      <td>-1.922996</td>\n",
              "      <td>-0.148651</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "          0         1         2         3\n",
              "0  3.390963 -0.474428  0.812440 -0.775999\n",
              "1 -0.396012 -0.244988 -0.556041 -0.707571\n",
              "2 -0.607280  1.287131  0.181852  0.616219\n",
              "3 -1.491688 -0.931453 -1.922996 -0.148651"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 173
        },
        "id": "PUvu9njqR70c",
        "outputId": "b5493410-c1e2-459c-8beb-50402d27783e"
      },
      "source": [
        "df.columns=['Age','Sex','DOB','Height']\n",
        "df"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>Sex</th>\n",
              "      <th>DOB</th>\n",
              "      <th>Height</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>3.390963</td>\n",
              "      <td>-0.474428</td>\n",
              "      <td>0.812440</td>\n",
              "      <td>-0.775999</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>-0.396012</td>\n",
              "      <td>-0.244988</td>\n",
              "      <td>-0.556041</td>\n",
              "      <td>-0.707571</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-0.607280</td>\n",
              "      <td>1.287131</td>\n",
              "      <td>0.181852</td>\n",
              "      <td>0.616219</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-1.491688</td>\n",
              "      <td>-0.931453</td>\n",
              "      <td>-1.922996</td>\n",
              "      <td>-0.148651</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "        Age       Sex       DOB    Height\n",
              "0  3.390963 -0.474428  0.812440 -0.775999\n",
              "1 -0.396012 -0.244988 -0.556041 -0.707571\n",
              "2 -0.607280  1.287131  0.181852  0.616219\n",
              "3 -1.491688 -0.931453 -1.922996 -0.148651"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 724
        },
        "id": "8kCrAIJ3R6lO",
        "outputId": "f558cf2b-cdd4-4d49-a79f-3e2cacb7303a"
      },
      "source": [
        "sns.pairplot(df);"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 720x720 with 20 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "id": "bIv8AvHuTmQK",
        "outputId": "75da0a06-3eb2-4fec-f25e-67acd3ab730c"
      },
      "source": [
        "df.describe()"
      ],
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>Sex</th>\n",
              "      <th>DOB</th>\n",
              "      <th>Height</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>4.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>4.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>0.223996</td>\n",
              "      <td>-0.090935</td>\n",
              "      <td>-0.371186</td>\n",
              "      <td>-0.254000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>2.163999</td>\n",
              "      <td>0.962001</td>\n",
              "      <td>1.176026</td>\n",
              "      <td>0.644616</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>-1.491688</td>\n",
              "      <td>-0.931453</td>\n",
              "      <td>-1.922996</td>\n",
              "      <td>-0.775999</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>-0.828382</td>\n",
              "      <td>-0.588685</td>\n",
              "      <td>-0.897780</td>\n",
              "      <td>-0.724678</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>-0.501646</td>\n",
              "      <td>-0.359708</td>\n",
              "      <td>-0.187094</td>\n",
              "      <td>-0.428111</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>0.550732</td>\n",
              "      <td>0.138041</td>\n",
              "      <td>0.339499</td>\n",
              "      <td>0.042567</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>3.390963</td>\n",
              "      <td>1.287131</td>\n",
              "      <td>0.812440</td>\n",
              "      <td>0.616219</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "            Age       Sex       DOB    Height\n",
              "count  4.000000  4.000000  4.000000  4.000000\n",
              "mean   0.223996 -0.090935 -0.371186 -0.254000\n",
              "std    2.163999  0.962001  1.176026  0.644616\n",
              "min   -1.491688 -0.931453 -1.922996 -0.775999\n",
              "25%   -0.828382 -0.588685 -0.897780 -0.724678\n",
              "50%   -0.501646 -0.359708 -0.187094 -0.428111\n",
              "75%    0.550732  0.138041  0.339499  0.042567\n",
              "max    3.390963  1.287131  0.812440  0.616219"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 26
        }
      ]
    }
  ]
}